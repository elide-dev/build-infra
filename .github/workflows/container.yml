name: "Container"

on:
  workflow_call:
    inputs:
      ## Coordinates for the image.
      image:
        description: "Image"
        required: true
        type: string

      ## Tags to apply to the image. If unspecified, standard tags are applied.
      tags:
        description: "Tags"
        required: false
        type: string

      ## Registry to push to, prefix to use.
      registry:
        description: "Registry"
        required: false
        default: "ghcr.io"
        type: string

      ## Whether to push the image to GHCR.
      push:
        description: "Push image"
        default: false
        required: false
        type: boolean

      ## Context path for the container build.
      path:
        description: "Context path"
        default: "."
        required: false
        type: string

      ## Dockerfile to build.
      dockerfile:
        description: "Dockerfile"
        required: false
        type: string

      ## Platforms to build for.
      platforms:
        description: "Platforms"
        default: "linux/amd64,linux/arm64"
        required: false
        type: string

      ## Runner machine to use.
      runner:
        description: "Runner"
        required: false
        type: string

      ## Whether to authenticate.
      auth:
        description: "Authenticate"
        required: false
        default: true
        type: boolean

      ## Whether to generate provenance assertions and SBOMs.
      provenance:
        description: "Provenance"
        required: false
        default: true
        type: boolean

      ## Whether to sign with cosign and Sigstore.
      sigstore:
        description: "Sigstore"
        required: false
        default: true
        type: boolean

      ## Whether to push artifacts.
      artifacts:
        description: "Artifacts"
        required: false
        default: true
        type: boolean

      ## Whether to push artifacts.
      artifact:
        description: "Artifact Name"
        required: false
        default: "container-image"
        type: string

      ## Cache-from settings for Docker builds.
      cache_from:
        description: "Cache from"
        default: "type=gha"
        required: false
        type: string

      ## Cache-to settings for Docker builds.
      cache_to:
        description: "Cache to"
        default: "type=gha,mode=max"
        required: false
        type: string

      ## Cache-source sharing for Docker builds.
      cache_source:
        description: "Cache source"
        default: ""
        required: false
        type: string

      ## Network mode to apply.
      network:
        description: "Network"
        required: false
        type: string
        default: audit

    outputs:
      ## Container image coordinate.
      imageid:
        description: "OCI Image ID"
        value: ${{ jobs.build.outputs.imageid }}

      ## Container image digest.
      digest:
        description: "OCI Image Digest"
        value: ${{ jobs.build.outputs.digest }}

      ## Container tags.
      tags:
        description: "Image Tags"
        value: ${{ jobs.build.outputs.tags }}

      ## Container labels.
      labels:
        description: "Image Labels"
        value: ${{ jobs.build.outputs.labels }}

env:
    CONTAINER_REGISTRY: ghcr.io

permissions:
  contents: read

jobs:
  ## Build a container image.
  build:
    name: "Container"
    runs-on: ${{ inputs.runner || vars.RUNNER || vars.RUNNER_AMD64 || vars.RUNNER_DEFAULT || 'ubuntu-latest' }}
    permissions:
      contents: read
      id-token: write
      checks: write
      pull-requests: write
      packages: write
    outputs:
      imageid: ${{ steps.dockerpush.outputs.imageid }}
      digest: ${{ steps.dockerpush.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
        - name: "Setup: Harden Runner"
          uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
          with:
            egress-policy: ${{ inputs.network || 'audit' }}
        - name: "Setup: Checkout"
          uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
          with:
            persist-credentials: false
        - name: "Setup: QEMU"
          uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
          with:
            platforms: "amd64,arm64,arm"
        - name: "Setup: Docker"
          uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
          id: buildx
          with:
            install: true
        - name: "Setup: GitHub Credentials"
          uses: docker/login-action@3d58c274f17dffee475a5520cbe67f0a882c4dbb
          if: inputs.auth
          with:
            registry: ${{ inputs.registry }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: "Setup: Container Cache"
          uses: reproducible-containers/buildkit-cache-dance@47a61eb1db5c76da4d93c7d3b05b9d12d4ca340b # v2.1.2
          if: inputs.cache_source != ''
          with:
            cache-source: ${{ inputs.cache_source }}
        - name: "Setup: Cosign"
          uses: sigstore/cosign-installer@e1523de7571e31dbe865fd2e80c5c7c23ae71eb4 # v3.4.0
        - name: "Setup: Image Metadata"
          id: meta
          uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
          with:
            images: ${{ inputs.registry }}/${{ inputs.image }}
            labels: |
              org.opencontainers.image.vendor=Elide
            tags: |
              type=raw,value=latest,enable={{is_default_branch}}
              type=ref,event=branch
              type=ref,event=tag
              type=ref,event=pr
        - name: "Build: Container"
          uses: docker/build-push-action@a254f8ca60a858f3136a2f1f23a60969f2c402dd # v6.4.0
          id: dockerpush
          with:
            push: ${{ inputs.push }}
            tags: ${{ inputs.tags || steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            platforms: ${{ inputs.push && inputs.platforms || 'linux/amd64' }}
            context: ${{ inputs.path }}
            file: ${{ inputs.dockerfile }}
            provenance: ${{ inputs.provenance }}
            sbom: ${{ inputs.provenance }}
            cache-from: ${{ inputs.cache_from }}
            cache-to: ${{ inputs.cache_to }}
        - name: "Artifacts: Outputs"
          if: inputs.artifacts
          run: |
            echo "${{ steps.dockerpush.outputs.imageid }}" > ./image_id
            echo "${{ steps.dockerpush.outputs.digest }}" > ./digest
        - name: "Artifacts: Release"
          uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
          if: inputs.artifacts
          with:
            name: ${{ inputs.artifact }}
            path: |
              ./image_id
              ./digest
        - name: "Artifacts: Sigstore"
          if: inputs.sigstore && steps.dockerpush.outputs.digest != ''
          env:
            DIGEST: ${{ steps.dockerpush.outputs.digest }}
            TAGS: ${{ steps.meta.outputs.tags }}
          run: |
            images=""
            for tag in ${TAGS}; do
              images+="${tag}@${DIGEST} "
            done
            cosign sign --yes "${images}"
