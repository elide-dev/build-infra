name: "Build: Gradle (JVM)"

on:
  workflow_call:
    inputs:
      ## Gradle action/target to run.
      action:
        description: "Action to run"
        default: "build"
        required: false
        type: string

      ## Gradle build flags to pass.
      flags:
        description: "Flags"
        required: false
        type: string

      ## Runner machine to use.
      runner:
        description: "Runner"
        required: false
        type: string

      ## Build step label to use.
      label:
        description: "Label"
        default: "Gradle"
        required: false
        type: string

      ## Whether to ignore errors.
      labs:
        description: "Labs"
        required: false
        type: boolean
        default: false

      ## Whether to install a regular JDK.
      install_jvm:
        description: "Install OpenJDK"
        required: false
        type: boolean
        default: true

      ## JVM version to use.
      jvm:
        description: "JVM Version"
        required: false
        type: string

      ## JVM distribution.
      jvm_dist:
        description: "JVM Variant"
        required: false
        type: string
        default: 'adopt-hotspot'

      ## Whether to install GraalVM.
      install_gvm:
        description: "Install GraalVM"
        required: false
        type: boolean
        default: false

      ## GVM version to use.
      gvm:
        description: "GVM Version"
        required: false
        type: string

      ## Whether to report coverage.
      coverage:
        description: "Report coverage"
        required: false
        default: false
        type: boolean

      ## Where to find the coverage report.
      coverage_report:
        description: "Coverage report file"
        required: false
        type: string

      ## Tags/flags for coverage report.
      coverage_flags:
        description: "Coverage flags"
        required: false
        type: string

      ## GVM components to install.
      gvm_components:
        description: "GVM Components"
        required: false
        type: string
        default: 'native-image,js'

      ## Whether to cache locally.
      cache_local:
        description: "Local cache"
        required: false
        type: boolean
        default: false

      ## Whether to cache remotely.
      cache_remote:
        description: "Remote cache"
        required: false
        type: boolean
        default: true

      ## Whether to cache using Actions.
      cache_action:
        description: "Action cache"
        required: false
        type: boolean
        default: true

      ## Whether to apply read-only mode to the cache.
      cache_read_only:
        description: "Read-only cache"
        required: false
        type: boolean
        default: false

      ## Whether to upload built artifacts.
      artifacts:
        description: "Artifacts"
        required: false
        type: boolean
        default: false

      ## Name of the output artifact.
      artifact:
        description: "Artifact"
        required: false
        type: string
        default: "gradle-build-output"

      ## Whether to upload a provenance release.
      provenance:
        description: "Provenance"
        required: false
        type: boolean
        default: false

      ## Whether to run checks.
      checks:
        description: "Checks"
        required: false
        type: boolean
        default: true

      ## Whether to perform release/publish steps.
      publish:
        description: "Publish"
        required: false
        type: boolean
        default: false

      ## Whether to upload built reports.
      reports:
        description: "Reports"
        required: false
        type: boolean
        default: true

      ## Gradle version to use (defaults to wrapper version)
      gradle:
        description: "Gradle version"
        required: false
        type: string
        default: 'wrapper'

    secrets:
      GDS_TOKEN:
        description: "GDS token"
        required: false
      SONAR_TOKEN:
        description: "Sonar token"
        required: true
      BUILDLESS_APIKEY:
        description: "Buildless API key"
        required: true
      CODECOV_TOKEN:
        description: "CodeCov token"
        required: false

env:
  GVM_VERSION: ${{ inputs.gvm || vars.GVM_VERSION || 'latest' }}
  JVM_VERSION: ${{ inputs.jvm || vars.JVM_VERSION || '20' }}
  JVM_DIST: ${{ inputs.jvm_dist || vars.JVM_DIST || 'adopt-hotspot' }}
  GVM_DIST: ${{ vars.GVM_DIST || 'graalvm' }}
  GRADLE_CACHE_LOCAL: ${{ inputs.cache_local }}
  GRADLE_CACHE_REMOTE: ${{ inputs.cache_remote }}
  BUILDLESS_APIKEY: ${{ secrets.BUILDLESS_APIKEY }}
  GRADLE_CACHE_PASSWORD: ${{ secrets.BUILDLESS_APIKEY }}
  CACHE_ENDPOINT: https://global.less.build/cache/generic/

permissions:
  contents: read

jobs:
  ## Build JVM app with Gradle
  build:
    name: "${{ inputs.label }}: Build"
    runs-on: ${{ inputs.runner || vars.RUNNER || vars.RUNNER_AMD64 || vars.RUNNER_DEFAULT || 'ubuntu-latest' }}
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    permissions:
      contents: "write"
      id-token: "write"
      checks: "write"
      pull-requests: "read"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit

      - name: "Setup: Checkout"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: "Setup: Cache"
        uses: buildjet/cache@e376f15c6ec6dc595375c78633174c7e5f92dc0e # v3
        if: inputs.cache_action
        with:
          path: |
            ./build
          key: ${{ runner.os }}-gradlebuild-${{ hashFiles('**/*.versions.toml', 'settings.gradle.kts') }}
          restore-keys: ${{ runner.os }}-gradlebuild-
      - name: "Setup: JDK ${{ env.JVM_VERSION }}"
        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3.13.0
        if: inputs.install_jvm
        with:
          distribution: ${{ env.JVM_DIST }}
          java-version: ${{ env.JVM_VERSION }}
      - name: "Setup: GraalVM"
        uses: graalvm/setup-graalvm@2a93b69fdf86ac5a078a98c1a707744632e1da94 # v1.1.5
        if: inputs.install_gvm
        with:
          components: ${{ inputs.gvm_components }}
          distribution: ${{ env.GVM_DIST || 'graalvm' }}
          java-version: ${{ env.JVM_VERSION }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          gds-token: ${{ secrets.GDS_TOKEN }}
      - name: "Check: Gradle Wrapper"
        uses: gradle/wrapper-validation-action@56b90f209b02bf6d1deae490e9ef18b21a389cd4 # v1.1.0
        if: inputs.checks
      - name: "Build: Gradle"
        continue-on-error: ${{ inputs.labs }}
        uses: gradle/gradle-build-action@87a9a15658c426a54dd469d4fc7dc1a73ca9d4a6 # v2
        id: gradlebuild
        env:
          CI: true
          TEST_EXCEPTIONS: true
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          gradle-version: ${{ inputs.gradle || 'wrapper' }}
          cache-read-only: ${{ inputs.cache_read_only || false }}
          dependency-graph: generate-and-submit
          arguments: |
            ${{ inputs.action || 'build' }}
            ${{ inputs.flags }}
            -Pci=true
      - name: "Build: Provenance Subject"
        id: hash
        run: |
          echo "hashes=$(sha256sum ./build/libs/* | base64 -w0)" >> "$GITHUB_OUTPUT"
      - name: "Report: Codecov"
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
        if: inputs.coverage
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ inputs.coverage_report }}
          flags: ${{ inputs.coverage_flags }}
      - name: "Publish: Build Artifacts"
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        if: inputs.artifacts
        with:
          name: ${{ inputs.artifact }}
          path: |
            ./build/libs/
            ./build/reports/

  ## Report: Provenance
  provenance:
    name: Provenance
    needs: [build]
    if: inputs.provenance
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: ${{ inputs.publish }}
